# 1 "main.c"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "main.c"
# 23 "main.c"
# 1 "/usr/local/lib/gcc-lib/arm-thumb-elf/3.3.6/include/stdbool.h" 1 3 4
# 24 "main.c" 2
# 1 "constants.h" 1
# 25 "main.c" 2
# 1 "mygbalib.h" 1





# 1 "gba.h" 1







typedef unsigned char u8;
typedef unsigned short u16;
typedef unsigned int u32;

typedef signed char s8;
typedef signed short s16;
typedef signed int s32;

typedef unsigned char byte;
typedef unsigned short hword;
typedef unsigned int word;
# 211 "gba.h"
enum
{
    VBLANK_HANDLER,
    HBLANK_HANDLER,
    VCOUNT_HANDLER,
    TIMER0_HANDLER,
    TIMER1_HANDLER,
    TIMER2_HANDLER,
    TIMER3_HANDLER,
    SERIAL_COM_HANDLER,
    DMA0_HANDLER,
    DMA1_HANDLER,
    DMA2_HANDLER,
    DMA3_HANDLER,
    KEYS_HANDLER,
    CART_HANDLER,
    MAX_INTERRUPT_HANDLERS,
};
# 267 "gba.h"
typedef void (*fp)(void);
# 7 "mygbalib.h" 2
# 1 "sprites.h" 1







int palette[] = {
((11) + (7<<5) + (6<<10)),
((12) + (7<<5) + (2<<10)),
((22) + (16<<5) + (14<<10)),
((28) + (27<<5) + (22<<10)),
((9) + (9<<5) + (9<<10)),
((31) + (31<<5) + (0<<10)),
((31) + (0<<5) + (0<<10)),
((0) + (0<<5) + (31<<10)),
((11) + (8<<5) + (3<<10)),
((27) + (27<<5) + (27<<10)),
((16) + (16<<5) + (16<<10)),
((31) + (21<<5) + (0<<10)),
((31) + (27<<5) + (24<<10)),
((27) + (0<<5) + (0<<10)),
((0) + (16<<5) + (0<<10)),
((0) + (31<<5) + (0<<10)),
((16) + (31<<5) + (16<<10)),
((0) + (0<<5) + (0<<10)),
((0) + (31<<5) + (31<<10)),
((31) + (31<<5) + (31<<10)),
((26) + (26<<5) + (26<<10)),
((20) + (14<<5) + (0<<10)),
((0) + (16<<5) + (31<<10)),
((16) + (24<<5) + (28<<10)),
((20) + (27<<5) + (31<<10)),
((23) + (28<<5) + (31<<10)),
};




u16 sprites[] = {


0,0,0,0,0,0,5,0,
0,0,0,0,0,5,5,5,
0,0,0,0,5,5,5,5,
0,0,0,5,5,12,12,5,
0,0,0,0,5,12,4,12,
0,0,0,5,5,12,4,12,
0,0,0,0,0,5,12,12,
0,0,0,0,4,4,4,4,


  0,0,0,0,0,0,0,0,
5,0,0,0,0,0,0,0,
5,5,5,0,0,0,0,0,
12,5,12,9,0,0,4,0,
12,4,12,0,9,4,0,0,
12,4,12,9,10,9,0,0,
12,12,4,10,9,0,0,0,
4,4,12,12,0,0,0,0,


0,0,0,0,12,12,4,4,
0,0,0,0,12,12,4,4,
0,0,0,0,9,10,4,4,
0,0,0,9,10,9,4,4,
0,0,9,9,9,9,4,4,
0,0,0,0,0,0,4,4,
0,0,0,0,0,0,4,4,
0,0,0,0,0,5,4,4,


4,4,12,12,0,0,0,0,
4,4,0,0,0,0,0,0,
4,4,0,0,0,0,0,0,
4,4,0,0,0,0,0,0,
4,4,0,0,0,0,0,0,
4,4,0,0,0,0,0,0,
5,4,0,0,0,0,0,0,
0,5,5,0,0,0,0,0,



0,0,0,5,0,5,5,0,
0,0,0,0,5,5,5,5,
0,0,0,0,5,5,5,5,
0,0,0,5,5,12,12,5,
0,0,0,0,5,12,4,4,
0,0,0,0,0,12,4,12,
0,0,0,0,0,12,12,12,
0,0,0,0,4,4,4,4,


0,0,0,0,0,0,0,0,
5,0,0,0,0,0,0,0,
5,5,5,0,0,0,0,0,
5,5,5,0,0,0,4,0,
5,12,5,0,9,4,0,0,
5,12,5,9,10,9,0,0,
5,5,4,10,9,0,0,0,
4,4,4,4,0,0,0,0,


0,0,0,0,12,12,4,4,
0,0,0,0,12,12,4,4,
0,0,0,0,9,10,4,4,
0,0,0,9,10,9,4,4,
0,0,9,9,9,9,4,4,
0,0,0,0,0,4,4,0,
0,0,0,0,5,4,4,0,
0,0,0,0,0,5,5,0,


12,12,4,4,0,0,0,0,
12,12,0,0,0,0,0,0,
4,4,0,0,0,0,0,0,
4,4,0,0,0,0,0,0,
4,4,0,0,0,0,0,0,
0,4,4,0,0,0,0,0,
0,4,5,5,0,0,0,0,
0,5,5,0,0,0,0,0,



0,0,0,0,0,0,5,0,
0,0,0,0,0,5,5,5,
0,0,0,0,5,5,5,5,
0,0,0,5,5,5,5,5,
0,0,0,0,5,5,5,5,
0,0,0,5,5,5,5,5,
0,0,0,0,0,5,5,5,
0,0,0,0,4,4,4,4,


0,0,0,0,0,0,0,0,
5,0,0,0,0,0,0,0,
5,5,5,0,0,0,0,0,
12,5,12,5,0,0,4,0,
12,4,12,0,9,4,0,0,
12,4,12,9,10,9,0,0,
12,12,12,10,9,0,0,0,
4,4,4,9,0,0,0,0,


0,0,0,0,12,12,4,4,
0,0,0,0,12,12,4,4,
0,0,0,0,9,10,4,4,
0,0,0,9,10,9,4,4,
0,0,9,9,9,9,4,4,
0,0,0,0,0,4,4,4,
0,0,0,0,0,5,4,4,
0,0,0,0,0,0,5,5,


4,4,12,12,0,0,0,0,
4,4,12,12,0,0,0,0,
4,4,0,0,0,0,0,0,
4,4,0,0,0,0,0,0,
4,4,0,0,0,0,0,0,
4,4,4,5,0,0,0,0,
0,4,5,5,0,0,0,0,
0,0,0,0,0,0,0,0,



0,0,0,0,0,0,5,0,
0,0,0,0,0,5,5,5,
0,0,0,0,5,5,5,5,
0,0,0,5,5,5,5,5,
0,0,0,0,5,5,5,5,
0,0,0,5,5,5,5,5,
0,0,0,0,0,5,5,5,
0,0,0,0,4,4,4,4,


0,0,0,0,0,0,0,0,
5,0,0,0,0,0,0,0,
5,5,5,0,0,0,0,0,
5,5,5,0,0,0,4,0,
5,5,5,0,9,4,0,0,
5,5,0,9,10,9,0,0,
4,4,9,10,9,0,0,0,
9,9,10,9,0,0,0,0,


0,0,0,0,12,12,9,9,
0,0,0,0,12,9,9,10,
0,0,0,0,9,10,10,9,
0,0,0,9,10,10,9,9,
0,0,9,9,9,9,4,4,
0,0,0,0,0,0,4,4,
0,0,0,0,0,0,4,5,
0,0,0,0,0,5,5,0,


10,10,9,12,0,0,0,0,
10,9,0,0,0,0,0,0,
9,4,0,0,0,0,0,0,
4,4,0,0,0,0,0,0,
4,4,0,0,0,0,0,0,
4,4,0,0,0,0,0,0,
4,4,0,0,0,0,0,0,
4,4,5,0,0,0,0,0,



2,2,2,2,2,2,2,2,
1,1,1,1,1,1,1,1,
0,0,1,1,0,0,0,0,
0,0,1,1,0,0,0,0,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,


2,2,2,2,2,2,2,2,
1,1,1,1,1,1,1,1,
0,0,0,0,1,1,0,0,
0,0,0,0,1,1,0,0,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,


1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,


1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,




0,0,0,0,0,0,0,0,
0,0,0,2,2,2,2,2,
2,2,2,2,2,1,1,1,
2,2,1,1,1,1,0,0,
1,1,2,1,0,0,0,0,
0,0,2,1,17,17,17,17,
0,0,2,17,1,1,1,1,
0,17,17,17,17,17,17,17,


0,0,2,2,2,2,2,2,
2,2,2,1,1,1,1,1,
1,1,1,1,1,1,0,0,
0,0,0,0,2,1,0,0,
0,0,0,0,17,17,17,17,
17,17,17,17,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,


17,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,


1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,




0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,2,2,
0,0,0,0,0,0,1,1,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,2,2,2,2,2,
2,2,2,2,2,2,1,1,
2,2,2,1,1,1,0,0,
1,1,1,2,1,0,0,0,
0,0,0,2,1,0,0,17,
0,17,17,17,17,17,17,17,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,17,
0,0,0,0,0,17,17,17,
0,0,0,0,0,17,1,1,
0,0,0,0,17,1,1,1,
0,0,0,17,17,17,17,17,
0,0,0,0,0,17,17,1,
0,0,0,0,0,0,0,17,


17,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,



1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,


1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,


17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
0,0,1,1,0,0,0,0,
0,0,1,1,0,0,0,0,
1,1,1,1,1,1,1,1,
2,2,2,2,2,2,2,2,

17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
0,0,0,0,1,1,0,0,
0,0,0,0,1,1,0,0,
1,1,1,1,1,1,1,1,
2,2,2,2,2,2,2,2,




1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
17,1,1,1,1,1,1,1,


1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,


0,17,17,17,17,17,17,17,
0,0,2,17,1,1,1,1,
0,0,2,1,17,17,17,17,
1,1,2,1,0,0,0,0,
2,2,1,1,1,1,0,0,
2,2,2,2,2,1,1,1,
0,0,0,2,2,2,2,2,
0,0,0,0,0,0,0,0,


17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
17,17,17,17,1,1,1,1,
0,0,0,0,17,17,17,17,
0,0,0,0,2,1,0,0,
1,1,1,1,1,1,0,0,
2,2,2,1,1,1,1,1,
0,0,2,2,2,2,2,2,




0,0,0,0,0,0,0,17,
0,0,0,0,0,17,17,1,
0,0,0,17,17,17,17,17,
0,0,0,0,17,1,1,1,
0,0,0,0,0,17,1,1,
0,0,0,0,0,17,17,17,
0,0,0,0,0,0,0,17,
0,0,0,0,0,0,0,0,


1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
17,1,1,1,1,1,1,1,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,1,1,
0,0,0,0,0,0,2,2,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,



0,17,17,17,17,17,17,17,
0,0,0,2,1,0,0,17,
1,1,1,2,1,0,0,0,
2,2,2,1,1,1,0,0,
2,2,2,2,2,2,1,1,
0,0,0,2,2,2,2,2,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,


17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,


1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,



1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
17,17,17,17,17,17,17,17,




0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,9,9,9,9,0,0,
0,9,4,4,4,4,9,0,
0,9,4,4,4,9,8,9,
9,4,4,4,9,8,9,4,
9,4,4,9,8,9,4,4,
9,4,9,8,8,9,4,4,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,9,9,9,9,0,0,
0,9,4,4,4,4,9,0,
9,4,4,4,4,4,9,0,
4,4,9,9,9,4,4,9,
4,9,9,4,9,9,4,9,
4,9,9,4,4,9,4,9,

9,9,8,8,9,4,4,4,
9,8,8,8,9,4,4,4,
0,9,8,8,9,4,4,4,
0,0,9,9,4,4,4,4,
0,0,0,9,4,4,4,4,
0,0,0,0,9,4,4,4,
0,0,0,0,0,9,9,4,
0,0,0,0,0,0,0,9,



4,9,9,9,9,9,4,9,
4,4,9,9,9,4,4,9,
4,4,4,4,4,4,9,0,
4,4,4,4,4,9,0,0,
4,4,4,4,9,0,0,0,
4,4,4,9,0,0,0,0,
4,9,9,0,0,0,0,0,
9,0,0,0,0,0,0,0,




0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,9,
0,0,0,0,0,0,0,4,
0,0,0,0,0,0,0,4,
0,0,0,0,0,0,0,4,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,9,9,9,9,0,0,
0,9,4,4,4,4,9,0,
9,4,4,4,4,4,9,0,
4,4,9,9,9,4,4,9,
4,9,9,4,9,9,4,9,
4,9,9,4,4,9,4,9,


0,0,0,0,0,0,0,4,
0,0,0,0,0,0,0,4,
0,0,0,0,0,0,0,4,
0,0,0,0,0,0,0,4,
0,0,0,0,0,0,0,4,
0,0,0,0,0,0,0,4,
0,0,0,0,0,0,0,4,
0,0,0,0,0,0,0,9,


4,9,9,9,9,9,4,9,
4,4,9,9,9,4,4,9,
4,4,4,4,4,4,9,0,
4,4,4,4,4,9,0,0,
4,4,4,4,9,0,0,0,
4,4,4,9,0,0,0,0,
4,9,9,0,0,0,0,0,
9,0,0,0,0,0,0,0,




0,0,0,0,0,0,0,4,
0,0,0,0,0,0,0,4,
0,0,6,0,0,0,4,9,
0,0,6,0,0,4,9,6,
0,6,9,0,4,9,9,6,
9,9,4,0,4,9,9,9,
4,4,0,9,0,4,4,4,
0,0,9,9,4,0,0,9,


4,0,0,0,0,0,0,0,
4,0,0,0,0,0,0,0,
9,4,0,0,0,6,0,0,
6,9,4,0,0,6,0,0,
6,9,9,4,0,9,6,0,
9,9,9,4,0,4,9,9,
4,4,4,0,9,0,4,4,
9,0,0,4,9,9,0,0,


0,9,9,4,4,4,0,9,
0,9,4,0,4,4,4,9,
0,9,4,0,0,4,4,9,
0,4,4,0,0,0,0,4,
0,4,0,0,0,0,0,6,
0,4,6,0,0,0,0,6,
0,0,6,6,0,0,0,0,
0,0,0,0,6,0,0,0,


9,0,4,4,4,9,9,0,
9,4,4,4,0,4,9,0,
9,4,4,0,0,4,9,0,
4,0,0,0,0,4,4,0,
6,0,0,0,0,0,4,0,
6,0,0,0,0,6,4,0,
0,0,0,0,0,6,6,0,
0,0,0,0,6,0,0,0,




0,0,0,0,0,0,0,4,
0,0,0,0,0,0,4,6,
0,0,0,0,0,4,6,11,
0,0,0,0,0,4,4,4,
0,0,0,0,0,4,10,9,
0,0,0,0,0,4,10,9,
0,0,0,0,0,4,10,9,
0,0,0,0,0,4,10,9,


4,0,0,0,0,0,0,0,
6,4,0,0,0,0,0,0,
11,6,4,0,0,0,0,0,
4,4,4,0,0,0,0,0,
9,10,4,0,0,0,0,0,
9,10,4,0,0,0,0,0,
9,10,4,0,0,0,0,0,
9,10,4,0,0,0,0,0,


0,0,0,0,4,4,10,9,
0,0,0,4,9,4,10,9,
0,0,4,4,4,4,10,9,
0,0,0,0,0,0,4,4,
0,0,0,0,0,6,11,5,
0,0,0,0,0,6,11,5,
0,0,0,0,0,0,6,5,
0,0,0,0,0,0,0,6,


9,10,4,4,0,0,0,0,
9,10,4,9,4,0,0,0,
9,10,4,4,4,4,0,0,
4,4,0,0,0,0,0,0,
5,11,6,0,0,0,0,0,
5,11,6,0,0,0,0,0,
5,6,0,0,0,0,0,0,
6,0,0,0,0,0,0,0,




0,0,0,0,0,0,0,6,
0,0,0,0,0,0,6,5,
0,0,0,0,0,6,11,5,
0,0,0,0,0,6,11,5,
0,0,0,0,0,0,4,4,
0,0,4,4,4,4,10,9,
0,0,0,4,9,4,10,9,
0,0,0,0,4,4,10,9,


6,0,0,0,0,0,0,0,
5,6,0,0,0,0,0,0,
5,11,6,0,0,0,0,0,
5,11,6,0,0,0,0,0,
4,4,0,0,0,0,0,0,
9,10,4,4,4,4,0,0,
9,10,4,9,4,0,0,0,
9,10,4,4,0,0,0,0,


0,0,0,0,0,4,10,9,
0,0,0,0,0,4,10,9,
0,0,0,0,0,4,10,9,
0,0,0,0,0,4,10,9,
0,0,0,0,0,4,4,4,
0,0,0,0,0,4,6,11,
0,0,0,0,0,0,4,6,
0,0,0,0,0,0,0,4,


9,10,4,0,0,0,0,0,
9,10,4,0,0,0,0,0,
9,10,4,0,0,0,0,0,
9,10,4,0,0,0,0,0,
4,4,4,0,0,0,0,0,
11,6,4,0,0,0,0,0,
6,4,0,0,0,0,0,0,
4,0,0,0,0,0,0,0,




0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,4,0,0,
0,0,0,0,0,4,4,0,
0,0,0,0,0,4,9,4,
0,0,6,6,0,4,4,4,
0,6,11,11,4,10,10,10,
6,5,5,5,4,9,9,9,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,0,0,
10,10,10,10,4,6,4,0,
9,9,9,9,4,11,6,4,


6,5,5,5,4,9,9,9,
0,6,11,11,4,10,10,10,
0,0,6,6,0,4,4,4,
0,0,0,0,0,4,9,4,
0,0,0,0,0,4,4,0,
0,0,0,0,0,4,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


9,9,9,9,4,11,6,4,
10,10,10,10,4,6,4,0,
4,4,4,4,4,4,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,0,0,4,4,4,
0,0,0,0,0,0,4,10,
0,0,0,0,0,0,4,10,
0,0,0,0,0,0,4,10,
0,0,0,0,0,0,4,10,
0,0,0,0,0,0,4,10,
0,0,0,0,0,0,4,10,
0,0,0,10,0,0,4,10,


4,4,4,0,0,0,0,0,
10,4,0,0,0,0,0,0,
10,4,0,0,0,0,0,0,
10,4,0,0,0,0,0,0,
10,4,0,0,0,0,0,0,
10,4,0,0,0,0,0,0,
10,4,0,0,0,0,0,0,
10,4,0,0,10,0,0,0,


0,0,0,10,0,4,10,9,
0,0,0,10,0,4,10,9,
0,0,4,10,4,4,10,9,
0,0,0,10,0,4,10,9,
0,0,0,10,0,4,10,9,
0,0,0,10,0,4,10,9,
0,0,0,0,0,4,10,9,
0,0,0,0,0,0,4,4,


9,10,4,0,10,0,0,0,
9,10,4,0,10,0,0,0,
9,10,4,4,10,4,0,0,
9,10,4,0,10,0,0,0,
9,10,4,0,10,0,0,0,
9,10,4,0,10,0,0,0,
9,10,4,0,0,0,0,0,
4,4,0,0,0,0,0,0,




0,0,0,0,0,0,4,4,
0,0,0,0,0,4,10,9,
0,0,0,10,0,4,10,9,
0,0,0,10,0,4,10,9,
0,0,0,10,0,4,10,9,
0,0,4,10,4,4,10,9,
0,0,0,10,0,4,10,9,
0,0,0,10,0,4,10,9,


4,4,0,0,0,0,0,0,
9,10,4,0,0,0,0,0,
9,10,4,0,10,0,0,0,
9,10,4,0,10,0,0,0,
9,10,4,0,10,0,0,0,
9,10,4,4,10,4,0,0,
9,10,4,0,10,0,0,0,
9,10,4,0,10,0,0,0,


0,0,0,10,0,0,4,10,
0,0,0,0,0,0,4,10,
0,0,0,0,0,0,4,10,
0,0,0,0,0,0,4,10,
0,0,0,0,0,0,4,10,
0,0,0,0,0,0,4,10,
0,0,0,0,0,0,4,10,
0,0,0,0,0,4,4,4,


10,4,0,0,10,0,0,0,
10,4,0,0,0,0,0,0,
10,4,0,0,0,0,0,0,
10,4,0,0,0,0,0,0,
10,4,0,0,0,0,0,0,
10,4,0,0,0,0,0,0,
10,4,0,0,0,0,0,0,
4,4,4,0,0,0,0,0,




0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,10,
0,0,0,0,0,0,0,0,
4,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,4,
4,10,10,10,10,10,10,10,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,4,0,0,0,0,0,
10,10,10,10,10,10,0,0,
0,0,4,0,0,0,0,0,
4,4,4,4,4,4,4,0,
10,10,10,10,10,10,10,4,
9,9,9,9,9,9,9,4,


4,10,10,10,10,10,10,10,
4,4,4,4,4,4,4,4,
4,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,10,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


9,9,9,9,9,9,9,4,
10,10,10,10,10,10,10,4,
4,4,4,4,4,4,4,0,
0,0,4,0,0,0,0,0,
10,10,10,10,10,10,0,0,
0,0,4,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,4,
0,4,18,18,18,18,18,18,
0,4,4,4,4,4,4,4,
0,4,18,18,18,18,18,18,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,4,
4,10,7,10,10,7,10,10,
4,10,18,10,10,18,10,10,
4,10,10,10,10,10,10,10,
4,10,18,10,10,18,10,10,


4,4,4,4,4,4,4,4,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


4,10,7,10,10,7,10,10,
4,4,4,4,4,4,4,4,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,4,
7,10,10,7,10,10,4,20,
18,10,10,18,10,10,4,20,
10,10,10,10,10,10,4,20,
18,10,10,18,10,10,4,20,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,0,
20,20,20,20,20,20,4,0,
10,10,7,10,7,10,4,0,
10,10,7,10,7,10,4,0,
10,10,7,10,7,4,4,0,


7,10,10,7,10,10,4,20,
4,4,4,4,4,4,4,20,
0,0,0,0,0,0,4,4,
0,0,0,0,0,0,4,10,
0,0,0,0,0,0,4,4,
0,0,0,0,0,4,4,0,
0,0,0,0,4,4,0,0,
0,0,0,4,4,4,0,0,


10,10,10,10,10,4,0,0,
20,20,20,20,20,4,0,0,
4,4,4,4,4,4,0,0,
10,4,0,0,0,0,0,0,
4,4,4,4,0,0,0,0,
0,0,4,4,4,0,0,0,
0,0,0,0,4,4,4,0,
0,0,0,0,0,0,4,4,




0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,4,
0,4,17,17,17,17,17,17,
0,4,4,4,4,4,4,4,
0,4,17,17,17,17,17,17,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,4,
4,10,7,10,10,7,10,10,
4,10,7,10,10,7,10,10,
4,10,10,10,10,10,10,10,
4,10,7,10,10,7,10,10,


4,4,4,4,4,4,4,4,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


4,10,7,10,10,7,10,10,
4,4,4,4,4,4,4,4,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,4,
7,10,10,7,10,10,4,20,
7,10,10,7,10,10,4,20,
10,10,10,10,10,10,4,20,
7,10,10,7,10,10,4,20,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,0,
20,20,20,20,20,20,4,0,
10,10,7,10,7,10,4,0,
10,10,7,10,7,10,4,0,
10,10,7,10,7,4,4,0,


7,10,10,7,10,10,4,20,
4,4,4,4,4,4,4,20,
0,0,0,0,0,0,4,4,
0,0,0,0,0,0,4,10,
0,0,0,0,0,0,4,4,
0,0,0,0,0,4,4,0,
0,0,0,0,4,4,0,0,
0,0,0,4,4,4,0,0,


10,10,10,10,10,4,0,0,
20,20,20,20,20,4,0,0,
4,4,4,4,4,4,0,0,
10,4,0,0,0,0,0,0,
4,4,4,4,0,0,0,0,
0,0,4,4,4,0,0,0,
0,0,0,0,4,4,4,0,
0,0,0,0,0,0,4,4,




0,0,0,18,18,18,18,18,
0,18,18,0,0,0,0,0,
22,22,22,22,18,18,18,18,
7,7,18,0,22,7,7,7,
22,18,19,22,22,22,22,22,
22,22,22,18,18,18,19,19,
18,18,18,18,19,18,18,18,
19,19,19,18,19,19,19,19,


18,0,0,0,0,18,18,0,
0,18,0,0,18,0,0,0,
18,18,18,18,22,22,22,22,
7,0,0,18,18,7,7,7,
22,22,22,19,22,18,22,22,
19,19,18,18,19,19,18,22,
18,18,18,18,18,18,19,19,
18,18,18,18,19,22,19,22,


18,18,18,18,22,22,22,22,
7,18,0,7,7,0,7,7,
22,22,18,22,22,22,18,0,
0,0,0,18,0,0,0,0,
18,18,18,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


22,22,22,22,22,22,18,22,
18,18,0,7,7,7,7,7,
0,18,18,22,22,22,22,22,
0,0,18,18,18,18,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,6,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,6,
0,0,0,0,0,0,0,6,
0,0,0,6,0,0,6,6,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
6,0,0,0,0,0,0,0,
6,6,0,0,0,0,0,0,
6,6,0,6,0,0,0,0,
11,6,6,0,0,6,0,0,
11,11,6,0,0,0,0,0,


0,0,0,0,0,6,6,11,
0,0,0,0,6,6,11,5,
0,0,0,0,6,6,11,5,
0,0,0,0,0,6,6,5,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


5,11,6,6,0,0,0,0,
5,11,6,6,0,0,0,0,
11,6,6,4,0,0,0,0,
11,6,4,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,0,0,0,0,0,
0,0,0,4,4,0,0,0,
0,0,0,0,4,0,0,0,
0,4,0,0,4,0,0,0,
0,4,4,4,10,4,0,0,
0,0,0,0,4,10,4,0,
0,0,0,0,0,4,10,4,
0,0,0,0,0,0,4,4,


0,0,0,0,0,0,0,0,
0,0,0,0,0,4,4,0,
0,0,0,0,4,4,0,0,
0,0,0,4,4,0,0,0,
0,0,4,4,0,0,0,0,
0,4,4,0,0,0,0,0,
4,4,0,0,0,0,0,0,
4,0,0,0,0,0,0,0,


0,0,0,0,0,0,4,4,
0,0,0,0,11,4,4,0,
0,0,0,11,21,11,0,0,
0,0,11,21,11,0,0,0,
0,11,21,11,0,0,0,0,
0,0,11,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


10,4,0,0,0,0,0,0,
4,10,4,0,0,0,0,0,
0,4,10,4,0,0,0,0,
0,0,4,10,4,4,4,0,
0,0,0,4,0,0,4,0,
0,0,0,4,0,0,0,0,
0,0,0,4,4,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,11,11,11,0,
0,0,0,0,0,11,11,0,
0,0,0,0,11,0,11,0,
0,0,0,11,0,0,0,0,
0,0,0,11,0,0,0,0,


0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
11,11,0,0,0,0,0,0,
0,0,11,0,0,0,0,0,
0,0,0,11,0,0,0,0,
0,0,0,0,11,0,0,0,
0,0,0,0,11,0,0,0,


0,0,0,11,0,0,0,0,
0,0,0,11,0,0,0,0,
0,0,0,0,11,0,0,0,
0,0,0,0,0,11,0,0,
0,0,0,0,0,0,11,11,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,0,0,11,0,0,0,
0,0,0,0,11,0,0,0,
0,11,0,11,0,0,0,0,
0,11,11,0,0,0,0,0,
0,11,11,11,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,0,0,0,0,8,
0,8,0,0,8,0,8,8,
8,8,8,0,0,8,8,6,
8,8,8,8,8,6,6,5,
8,6,6,6,6,6,5,5,
8,8,6,5,5,5,5,5,
0,8,8,6,6,5,5,5,
0,0,8,6,6,5,5,5,


8,8,0,0,0,0,8,0,
8,8,8,0,0,8,0,0,
6,8,8,0,0,0,0,0,
6,8,8,0,8,0,0,8,
5,6,8,8,0,8,0,0,
5,5,6,8,8,8,8,8,
5,5,6,6,6,8,8,8,
5,5,5,5,6,8,8,8,


0,8,6,5,5,5,5,5,
8,6,6,6,5,5,5,5,
8,8,8,8,5,5,6,6,
8,8,8,8,5,6,6,6,
8,0,8,8,6,8,8,8,
0,8,8,8,8,8,8,0,
0,8,8,8,8,8,0,0,
0,8,8,8,8,0,0,8,


5,5,5,5,6,8,8,0,
5,5,6,6,8,8,8,0,
5,5,6,8,8,8,8,0,
6,5,6,8,8,0,0,0,
8,6,6,8,8,8,0,0,
8,8,6,8,8,0,0,8,
8,8,8,8,8,0,8,0,
0,8,8,8,8,0,0,0,


0,0,19,19,19,19,0,0,
0,19,19,19,19,19,19,0,
0,19,0,0,0,0,19,0,
0,0,0,0,0,19,19,0,
0,0,0,0,19,19,0,0,
0,0,0,19,19,0,0,0,
0,0,19,19,0,0,0,0,
0,19,19,19,19,19,19,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,0,19,19,19,19,0,0,
0,19,19,19,19,19,19,0,
0,19,0,0,0,0,19,0,
0,0,0,0,0,0,19,0,
0,0,0,19,19,19,0,0,
0,0,0,0,0,0,19,0,
0,19,0,0,0,0,19,0,
0,0,19,19,19,19,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,19,19,19,19,19,0,
0,19,19,0,0,0,19,0,
0,19,19,0,0,0,19,0,
0,19,19,0,0,0,0,0,
0,19,19,0,0,0,0,0,
0,19,19,0,0,0,19,0,
0,19,19,0,0,0,19,0,
0,0,19,19,19,19,19,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,





0,19,19,19,19,0,0,0,
0,19,19,0,0,19,0,0,
0,19,19,0,0,0,19,0,
0,19,19,0,0,0,19,0,
0,19,19,0,0,0,19,0,
0,19,19,0,0,0,19,0,
0,19,19,0,0,19,0,0,
0,19,19,19,19,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,19,19,19,19,19,19,0,
0,19,19,0,0,0,0,0,
0,19,19,0,0,0,0,0,
0,19,19,19,19,19,19,0,
0,19,19,0,0,0,0,0,
0,19,19,0,0,0,0,0,
0,19,19,0,0,0,0,0,
0,19,19,19,19,19,19,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,19,19,0,0,19,19,0,
0,19,19,0,0,19,19,0,
0,19,19,0,0,19,19,0,
0,19,19,19,19,19,19,0,
0,19,19,19,19,19,19,0,
0,19,19,0,0,19,19,0,
0,19,19,0,0,19,19,0,
0,19,19,0,0,19,19,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,19,19,19,19,19,19,0,
0,19,19,19,19,19,19,0,
0,0,0,19,19,0,0,0,
0,0,0,19,19,0,0,0,
0,0,0,19,19,0,0,0,
0,0,0,19,19,0,0,0,
0,19,19,19,19,19,19,0,
0,19,19,19,19,19,19,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,



0,19,19,0,0,0,0,0,
0,19,19,0,0,0,0,0,
0,19,19,0,0,0,0,0,
0,19,19,0,0,0,0,0,
0,19,19,0,0,0,0,0,
0,19,19,0,0,0,0,0,
0,19,19,19,19,19,19,0,
0,19,19,19,19,19,19,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,19,19,0,0,19,19,0,
0,19,19,19,0,19,19,0,
0,19,19,19,19,19,19,0,
0,19,19,0,19,19,19,0,
0,19,19,0,0,19,19,0,
0,19,19,0,0,19,19,0,
0,19,19,0,0,19,19,0,
0,19,19,0,0,19,19,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,19,19,19,19,0,0,
0,19,19,0,0,0,19,0,
0,19,19,0,0,0,19,0,
0,19,19,0,0,0,19,0,
0,19,19,0,0,0,19,0,
0,19,19,0,0,0,19,0,
0,19,19,0,0,0,19,0,
0,0,19,19,19,19,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,19,19,19,19,19,19,0,
0,19,19,19,19,19,19,0,
0,0,0,19,19,0,0,0,
0,0,0,19,19,0,0,0,
0,0,0,19,19,0,0,0,
0,0,0,19,19,0,0,0,
0,0,0,19,19,0,0,0,
0,0,0,19,19,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,



0,19,19,0,0,19,19,0,
0,19,19,0,0,19,19,0,
0,19,19,0,0,19,19,0,
0,19,19,0,0,19,19,0,
0,19,19,0,0,19,19,0,
0,19,19,0,0,19,19,0,
0,19,19,19,19,19,19,0,
0,19,19,19,19,19,19,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,


0,19,0,0,0,0,19,0,
0,19,0,0,0,0,19,0,
0,19,0,0,0,19,19,0,
0,19,19,0,0,19,0,0,
0,0,19,0,0,19,0,0,
0,0,19,0,0,19,0,0,
0,0,19,19,0,19,0,0,
0,0,0,0,19,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,19,19,0,0,0,19,0,
0,19,19,0,0,0,19,0,
0,19,19,0,0,0,19,0,
0,19,19,0,19,0,19,0,
0,19,19,0,19,0,19,0,
0,19,19,0,19,0,19,0,
0,19,19,19,0,19,19,0,
0,19,19,0,0,0,19,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,19,19,0,0,19,19,0,
0,19,19,0,0,19,19,0,
0,19,19,0,0,19,19,0,
0,19,19,0,0,19,19,0,
0,0,19,19,19,19,0,0,
0,0,0,19,19,0,0,0,
0,0,0,19,19,0,0,0,
0,0,0,19,19,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,



0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,23,23,0,0,0,0,
0,23,25,19,23,23,23,23,
0,23,25,19,19,19,19,19,
0,23,25,19,19,19,19,19,
0,23,25,19,19,19,19,19,
0,23,24,25,19,19,19,19,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,23,23,23,0,0,0,0,
23,25,19,19,23,0,0,0,
24,24,25,19,19,23,0,0,
25,24,25,19,19,25,23,0,
19,25,25,19,19,25,23,0,
19,19,19,19,19,25,23,0,

0,23,23,24,25,19,25,25,
0,0,23,23,24,25,25,24,
0,0,0,23,23,24,24,23,
0,0,0,0,23,23,23,23,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

25,25,19,25,25,25,23,0,
24,25,25,24,24,23,0,0,
23,24,24,23,23,0,0,0,
23,23,23,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,




0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,23,
0,0,0,0,0,0,23,19,
0,0,0,23,23,23,24,25,
0,0,23,19,19,19,24,24,
0,23,25,19,19,19,19,24,
0,23,24,25,19,19,19,24,
0,0,23,24,25,25,19,19,

0,0,0,0,0,0,0,0,
23,23,23,0,0,0,0,0,
19,25,25,23,0,0,0,0,
19,19,19,25,23,0,0,0,
25,19,19,25,23,0,0,0,
24,25,19,25,23,0,0,0,
24,19,19,25,24,23,0,0,
19,19,19,19,25,24,23,0,

0,0,23,24,24,24,24,24,
0,0,0,23,23,23,23,23,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

24,24,24,24,24,24,23,0,
23,23,23,23,23,23,23,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,



0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,23,23,
0,0,0,0,0,23,25,19,
0,0,0,23,23,24,25,19,
0,0,23,19,19,24,24,25,
0,23,25,19,19,19,24,24,
0,23,25,19,19,19,24,24,

0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
23,23,0,0,0,0,0,0,
19,19,23,0,0,0,0,0,
19,19,25,23,0,0,0,0,
19,19,25,24,23,23,0,0,
19,19,24,24,19,25,23,0,
19,24,24,19,19,25,23,0,

0,23,24,25,25,19,19,19,
0,0,23,24,24,24,24,24,
0,0,0,23,23,23,23,23,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,

19,19,19,19,25,24,23,0,
24,24,24,24,24,23,0,0,
23,23,23,23,23,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0
};
# 8 "mygbalib.h" 2
# 1 "globalvariables.h" 1





int st_level = 0;
int st_mode = 0;
int st_status = 0;
_Bool needToUpdateLevel = 0;


int tick_sec = 0;
int tick_cmd = 0;
int button_delay = 0;

int proj_blow_tf = 0;
int swarm_blow_tf = 0;
int cnn1_repair_tf = 0;
int cnn2_repair_tf = 0;
int cnn3_repair_tf = 0;
int cnn4_repair_tf = 0;
int cnn5_repair_tf = 0;
int railgun_reload_tf = 0;


int hero = 0;
float float_p_x = 112;
float float_p_y = 75;
int p_x = 112;
int p_y = 75;


int proj_actv = 0;

int proj1_form = 0;
int proj2_form = 0;
int proj3_form = 0;
int proj4_form = 0;
int proj5_form = 0;

float proj_x_flt = 240;
float proj_y_flt = 160;
int proj_x = 240;
int proj_y = 160;

int proj_cnt = 0;
float proj_spd = 0;

int blowing_proj_id = 0;
_Bool blowing_proj_st = 0;


int rng_seed[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int rng_idx = 0;


int boss_health = 4;
_Bool blowing_swarm_st = 0;


int ship_health = 60;
int shot_cnn = 0;

int cnn1_stat = 1;
int cnn2_stat = 1;
int cnn3_stat = 1;
int cnn4_stat = 1;
int cnn5_stat = 1;
int railgun_stat = 1;
# 9 "mygbalib.h" 2
# 1 "button.h" 1







void checkbutton()
{
    u16 buttons = (0x3FF & (~*(volatile u16*)0x4000130));
    if (st_mode==2)
    {
        if ((buttons & 0x001) == 0x001)
        {
            buttonA();
        }
        if ((buttons & 0x002) == 0x002)
        {
            buttonB();
        }
        if ((buttons & 0x010) == 0x010)
        {
            buttonR();
        }
        if ((buttons & 0x020) == 0x020)
        {
            buttonL();
        }
        if ((buttons & 0x040) == 0x040)
        {
            buttonU();
        }
        if ((buttons & 0x080) == 0x080)
        {
            buttonD();
        }
    }
    else if (st_mode==0)
    {
        if ((buttons & 0x008) == 0x008)
        {
            buttonS();
        }
    }
}


void buttonA(void)
{
    if (canInteract(p_x,p_y,(96 +16),68)==1)
    {

        if ((st_level!=3)&&((proj_actv==1)&&(cnn1_stat==1)))
        {
            proj_actv = 0;
            blowProjectile(14);
        }


        else if (st_level==3&&railgun_stat==1)
        {
            shootRailgun();
        }
    }
    else if (((proj_actv==2)&&(cnn2_stat==1))&&(canInteract(p_x,p_y,(130),48 +5)==1))
    {
        proj_actv = 0;
        blowProjectile(14 +1);
    }
    else if (((proj_actv==3)&&(cnn3_stat==1))&&(canInteract(p_x,p_y,(175),48 +5)==1))
    {
        proj_actv = 0;
        blowProjectile(14 +2);
    }
    else if (((proj_actv==4)&&(cnn4_stat==1))&&(canInteract(p_x,p_y,(130),90 -12)==1))
    {
        proj_actv = 0;
        blowProjectile(14 +3);
    }
    else if (((proj_actv==5)&&(cnn5_stat==1))&&(canInteract(p_x,p_y,(175),90 -12)==1))
    {
        proj_actv = 0;
        blowProjectile(14 +4);
    }
}


void buttonB(void)
{
    if ((cnn1_stat==0)&&(canInteract(p_x,p_y,(96 +13),68)==1))
    {
        cnn1_repair_tf = tick_sec+4;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (11 -1), 96, 68);
        cnn1_stat = 2;
    }
    else if ((cnn2_stat==0)&&(canInteract(p_x,p_y,(130),48 +5)==1))
    {
        cnn2_repair_tf = tick_sec+4;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (9 -1), 130, 48);
        cnn2_stat = 2;
    }
    else if ((cnn3_stat==0)&&(canInteract(p_x,p_y,(175),48 +5)==1))
    {
        cnn3_repair_tf = tick_sec+4;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (7 -1), 175, 48);
        cnn3_stat = 2;
    }
    else if ((cnn4_stat==0)&&(canInteract(p_x,p_y,(130),90 -12)==1))
    {
        cnn4_repair_tf = tick_sec+4;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (4 -1), 130, 90);
        cnn4_stat = 2;
    }
    else if ((cnn5_stat==0)&&(canInteract(p_x,p_y,(175),90 -12)==1))
    {
        cnn5_repair_tf = tick_sec+4;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (2 -1), 175, 90);
        cnn5_stat = 2;
    }
}


void buttonS()
{
        if (st_mode != 0) return;

   pageNavigationHandler();
}


void buttonR(void)
{
    if(p_x<185)
    {
        hero=0 +1 +1;
        float_p_x+=0.031;
        p_x=(int)float_p_x;
    }
}


void buttonL(void)
{
    if(p_x>111)
   {
      hero=0 +1;
      float_p_x-=0.031;
      p_x=(int)float_p_x;
   }
}


void buttonU(void)
{
   if(p_y>53)
   {
      hero=0 +1 +1 +1;
      float_p_y-=0.031;
      p_y=(int)float_p_y;
   }
}


void buttonD(void)
{
   if(p_y<78)
   {
      hero=0;
      float_p_y+=0.031;
      p_y=(int)float_p_y;
   }
}
# 10 "mygbalib.h" 2
# 1 "projectiles.h" 1





void randProjectile(void)
{

    int cur_proj_rng = rng_seed[rng_idx];


    if(cur_proj_rng==1&&st_level==3){cur_proj_rng = 5;}


    drawProjectile(cur_proj_rng);


    proj_cnt+=1;


    rng_idx+=1;
    if(modulo16(rng_idx)==0) rng_idx=0;

}


void drawProjectile(int proj_idx)
{

    proj_actv = proj_idx;


    switch(proj_actv)
    {
        case 1:
            proj_x_flt = 0;
            proj_y_flt = 68;
            break;

        case 2:
            proj_x_flt = 130;
            proj_y_flt = 0;
            break;

        case 3:
            proj_x_flt = 175;
            proj_y_flt = 0;
            break;

        case 4:
            proj_x_flt = 130;
            proj_y_flt = 144;
            break;

        case 5:
            proj_x_flt = 175;
            proj_y_flt = 144;
            break;
    }

    proj_x = (int)proj_x_flt;
    proj_y = (int)proj_y_flt;
}


void moveProjectile(void)
{
    switch(proj_actv)
    {
        case 1:

            drawSprite(proj1_form, 14, proj_x, proj_y);
            proj_x_flt+=proj_spd;
            proj_x = (int)proj_x_flt;
            break;

        case 2:

            drawSprite(proj2_form, (14 +1), proj_x, proj_y);
            proj_y_flt+=proj_spd;
            proj_y = (int)proj_y_flt;
            break;

        case 3:

            drawSprite(proj3_form, (14 +2), proj_x, proj_y);
            proj_y_flt+=proj_spd;
            proj_y = (int)proj_y_flt;
            break;

        case 4:

            drawSprite(proj4_form, (14 +3), proj_x, proj_y);
            proj_y_flt-=proj_spd;
            proj_y = (int)proj_y_flt;
            break;

        case 5:

            drawSprite(proj5_form, (14 +4), proj_x, proj_y);
            proj_y_flt-=proj_spd;
            proj_y = (int)proj_y_flt;
            break;
    }
}


void checkDamageProjectile(void)
{
# 118 "projectiles.h"
    if (proj_actv==1&&proj_x>=(96 -16))
    {
        proj_actv = 0;
        resetProjectile(14);
        reduceShipHealth();
        cnn1_stat = 0;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (11 -1), 96, 68);
    }
    else if (proj_actv==2&&proj_y>=(48 -16))
    {
        proj_actv = 0;
        resetProjectile(14 +1);
        reduceShipHealth();
        cnn2_stat = 0;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (9 -1), 130, 48);
    }
    else if (proj_actv==3&&proj_y>=(48 -16))
    {
        proj_actv = 0;
        resetProjectile(14 +2);
        reduceShipHealth();
        cnn3_stat = 0;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (7 -1), 175, 48);
    }
    else if (proj_actv==4&&proj_y<=(90 +16))
    {
        proj_actv = 0;
        resetProjectile(14 +3);
        reduceShipHealth();
        cnn4_stat = 0;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (4 -1), 130, 90);
    }
    else if (proj_actv==5&&proj_y<=(90 +16))
    {
        proj_actv = 0;
        resetProjectile(14 +4);
        reduceShipHealth();
        cnn5_stat = 0;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (2 -1), 175, 90);
    }
}


void blowProjectile(int N)
{
    if (blowing_proj_st==1){return;}

    drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, 13, proj_x, proj_y);

    blowing_proj_st = 1;
    proj_blow_tf = tick_cmd+3;
    blowing_proj_id = N;
}


void blowProjectileHandler(void)
{
    if (blowing_proj_st==0){return;}

    if (tick_cmd>=proj_blow_tf)
    {
        resetProjectile(blowing_proj_id);
        drawSprite(0, 13, 240, 160);

        blowing_proj_st = 0;
    }
}


void resetProjectile(int N)
{
    proj_x_flt = 240;
    proj_y_flt = 160;
    proj_x = 240;
    proj_y = 160;

    drawSprite(0, N, proj_x, proj_y);
    needToUpdateLevel = 1;
}
# 11 "mygbalib.h" 2
# 1 "swarms.h" 1





void blowSwarmHandler(void)
{
    if (blowing_swarm_st==0){return;}

    if (tick_cmd>=swarm_blow_tf)
    {
        dumpSwarm(22);
        reformSwarm(22);

        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (11 -1), 96, 68);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1, 12, (96 -16), 68);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, 11, 96, 68);
        resetBeam();

        blowing_swarm_st = 0;
    }
}


int makeSwarm(int num_drone_fleet) {
        int row_counter = 0;
        int drone_space_x = 18;
        int middle_row = 66;
        int drone_space_y = middle_row;

        int i = 0;
        for (i; i < boss_health; i++) {

                while (row_counter != (boss_health - i)){
                        drawSprite(13, num_drone_fleet, row_counter * drone_space_x, drone_space_y);
                        row_counter++;
                        num_drone_fleet++;
                }
                row_counter = 0;
                drone_space_y = drone_space_y - 22;
        }

        drone_space_y = middle_row;
        i = i - 1;
        for (i; i > 0; i--) {
                drone_space_y = drone_space_y + 22;
                while (row_counter != i){
                        drawSprite(13, num_drone_fleet, row_counter * drone_space_x, drone_space_y);
                        row_counter++;
                        num_drone_fleet++;
                }
                row_counter = 0;
        }
        return num_drone_fleet;
}


int explodeSwarmRow(int num_drone_fleet) {
        int rows = 7;
        int drone_space_x = 18;
        int middle_row = 66;

        int i = 0;
        int j = 0;
        int k = 0;
        for (i; i < boss_health; i++) {
                j += 1;
                k += j;
        }

        k = k - 1;
        i = 0;
        for (i; i < boss_health; i++) {
                drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, num_drone_fleet, i * drone_space_x, middle_row);
                num_drone_fleet = num_drone_fleet + 1;
        }
}


void dumpSwarm(int num_drone_fleet) {
        int total_drones = boss_health * boss_health;

        int i = 0;
        for (i; i < total_drones; i++) {
                drawSprite(0, num_drone_fleet + i, 240, 160);
        }
}


void reformSwarm(int num_drone_fleet) {
        boss_health = boss_health - 1;
        makeSwarm(num_drone_fleet);
}
# 12 "mygbalib.h" 2
# 1 "weaponry.h" 1

void cannonHandler(void)
{





    if ((cnn1_stat==2)&&(tick_sec>=cnn1_repair_tf))
    {
        cnn1_stat=1;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (11 -1), 240, 160);
    }
    if ((cnn2_stat==2)&&(tick_sec>=cnn2_repair_tf))
    {
        cnn2_stat=1;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (9 -1), 240, 160);
    }
    if ((cnn3_stat==2)&&(tick_sec>=cnn3_repair_tf))
    {
        cnn3_stat=1;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (7 -1), 240, 160);
    }
    if ((cnn4_stat==2)&&(tick_sec>=cnn4_repair_tf))
    {
        cnn4_stat=1;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (4 -1), 240, 160);
    }
    if ((cnn5_stat==2)&&(tick_sec>=cnn5_repair_tf))
    {
        cnn5_stat=1;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (2 -1), 240, 160);
    }
}


void shootRailgun(void)
{
    if(railgun_stat!=1){return;}

    drawBeam();

    railgun_stat = 0;
    railgun_reload_tf = tick_sec+7;

    blowing_swarm_st = 1;
    swarm_blow_tf = tick_cmd+3;
    explodeSwarmRow(22);
}


void drawBeam(void)
{

    int i = 0;
    int x = 0;
    while (i < 5)
    {
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (85 +i), x, 68);
        x+=16;
                  i++;
         }
}


void resetBeam(void)
{

    int i = 0;
    int x = 0;
    while (i < 5)
    {
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, (85 +i), 240, 160);
        x+=16;
                  i++;
         }
}


void railgunHandler(void)
{
    if ((railgun_stat==0)&&(tick_sec>=railgun_reload_tf))
    {
        railgun_stat=1;
        drawSprite(0, (11 -1), 240, 160);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1, 12, (96 -16), 68);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1, 11, 96, 68);
    }
}
# 13 "mygbalib.h" 2
# 1 "levels.h" 1





void movePlayer(void)
{
    if(st_mode==2) drawSprite(hero, 5, p_x, p_y);
}


void reduceShipHealth(void)
{

    ship_health-=1;


    switch (ship_health)
    {
        case 0:
            drawSprite(0, 19 +2, 240, 160);
            break;
        case 1:
            drawSprite(0 +1 +1 +1 +1 +2 +1 +2 +1 +1 +1, 19 +2, 224, 0);
            break;
        case 2:
            drawSprite(0, 19 +1, 240, 160);
            break;
        case 3:
            drawSprite(0 +1 +1 +1 +1 +2 +1 +2 +1 +1 +1, 19 +1, 208, 0);
            break;
        case 4:
            drawSprite(0, 19, 240, 160);
            break;
        case 5:
            drawSprite(0 +1 +1 +1 +1 +2 +1 +2 +1 +1 +1, 19, 192, 0);
            break;
    }
}


void pageNavigationHandler(void)
{

   if ((tick_cmd-button_delay)>=2)
        {
      button_delay = tick_cmd;


        if (st_level == 0 && st_status == 0)
        {
                clearDisplay();
                st_level = 1;
                st_mode = 1;
                st_status = 0;
         needToUpdateLevel=1;
                return;
        }


        if (st_level == 1 && st_status == 1)
        {
                clearDisplay();
                level2Display();
                st_level = 2;
                st_status = 0;
                return;
        }


        if (st_level == 2 && st_status == 0)
        {
         st_mode = 1;
         needToUpdateLevel=1;
                return;
        }


        if (st_level == 2 && st_status == 1)
        {
                clearDisplay();
                level3Display();
                st_level = 3;
                st_status = 0;
                return;
        }


        if (st_level == 3 && st_status == 0)
        {
         st_mode = 1;
         needToUpdateLevel=1;
                return;
        }


        if ((st_level == 3 && st_status == 1) || st_status == 2)
        {
                clearDisplay();
                initialDisplay();
                st_level = 0;
                st_mode = 0;
                st_status = 0;
                return;
        }
    }
}


void levelHandler()
{
    if (needToUpdateLevel==0||st_mode==0){return;}


    if (st_level==1)
    {
        level1ProgressTree();
    }

    else if (st_level==2)
    {
        level2ProgressTree();
    }

    else if (st_level==3)
    {
        level3ProgressTree();
    }
}


void level1ProgressTree()
{

    if(st_mode==2)
    {

        if (ship_health<=0)
        {
            clearDisplay();
            loseDisplay();
            st_mode = 0;
            st_status = 2;
            resetLevel();
        }


        else if (proj_cnt<8)
        {
            randProjectile();
        }


        else
        {
            clearDisplay();
            winDisplay();
            st_mode = 0;
            st_status = 1;
            resetLevel();
        }
        needToUpdateLevel = 0;
    }


    else if(st_mode==1)
    {

        proj1_form = 13 +1 +1 +1;
        proj2_form = 13 +1 +1;
        proj3_form = 13 +1 +1;
        proj4_form = 13 +1;
        proj5_form = 13 +1;


        cnn1_stat=1;
        cnn2_stat=1;
        cnn3_stat=1;
        cnn4_stat=1;
        cnn5_stat=1;


        proj_spd = 0.009;

        ship_health = 60;
        proj_cnt = 0;
        st_mode=2;
        needToUpdateLevel = 1;

        clearDisplay();
        drawStaticObjectsLvlNorm();
    }
}


void level2ProgressTree()
{

    if(st_mode==2)
    {

        if (ship_health<=0)
        {
            clearDisplay();
            loseDisplay();
            st_mode = 0;
            st_status = 2;
            resetLevel();
        }


        else if (proj_cnt<12)
        {
            randProjectile();
        }


        else
        {
            clearDisplay();
            winDisplay();
            st_mode = 0;
            st_status = 1;
            resetLevel();
        }
        needToUpdateLevel = 0;
    }


    else if(st_mode==1)
    {

        proj1_form = 13;
        proj2_form = 13;
        proj3_form = 13;
        proj4_form = 13;
        proj5_form = 13;


        cnn1_stat=1;
        cnn2_stat=1;
        cnn3_stat=1;
        cnn4_stat=1;
        cnn5_stat=1;


        proj_spd = 0.018;

        ship_health = 60;
        proj_cnt = 0;
        st_mode=2;
        needToUpdateLevel = 1;

        clearDisplay();
        drawStaticObjectsLvlNorm();
    }
}


void level3ProgressTree()
{

    if(st_mode==2)
    {

        if (ship_health<=0)
        {
            clearDisplay();
            loseDisplay();
            st_mode = 0;
            st_status = 2;
            resetLevel();
        }


        else if (boss_health>0)
        {
            randProjectile();
        }


        else
        {
            clearDisplay();
            winDisplay();
            st_mode = 0;
            st_status = 1;
            resetLevel();
        }
        needToUpdateLevel = 0;
    }


    else if(st_mode==1)
    {


        proj2_form = 13;
        proj3_form = 13;
        proj4_form = 13;
        proj5_form = 13;


        cnn1_stat=1;
        cnn2_stat=1;
        cnn3_stat=1;
        cnn4_stat=1;
        cnn5_stat=1;
        railgun_stat=1;


        proj_spd = 0.018;

        ship_health = 60;
        boss_health = 4;
        proj_cnt = 0;
        st_mode=2;
        needToUpdateLevel = 1;

        clearDisplay();
        drawStaticObjectsLvlBoss();
    }
}


void resetLevel(void)
{
    cnn1_stat=1;
    cnn2_stat=1;
    cnn3_stat=1;
    cnn4_stat=1;
    cnn5_stat=1;
    railgun_stat=1;
    blowing_proj_st=0;
    blowing_swarm_st=0;
}
# 14 "mygbalib.h" 2
# 1 "displaymodes.h" 1





void clearDisplay(void)
{
        int i;
        for (i = 0; i < 128; i++)
        {
                drawSprite(0,i,240,160);
        }
}


void initialDisplay(void)
{

        int idx = 0;
        int x = 9;
        int y = 40;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        x += 2;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        x += 2;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);


        x = 5;
        y = 70;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        x += 2;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        x++;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);


        x = 9;
        y = 100;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        x += 2;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        x += 2;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
}


void winDisplay(void)
{
        int idx = 1;
        int x = 8;
        int y = 80;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        x++;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
}


void loseDisplay(void)
{
        int idx = 1;
        int x = 8;
        int y = 80;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        x++;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
}


void level2Display(void)
{
        int idx = 1;
        int x = 8;
        int y = 80;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        x++;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
}


void level3Display(void)
{
        int idx = 1;
        int x = 8;
        int y = 80;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
        x++;
        drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, (x++)*10, y);
}


void drawStaticObjectsLvlNorm(void)
{
    drawSprite(13 +1 +1 +1 +1 +1 +1, 11, 96, 68);
    drawSprite(13 +1 +1 +1 +1, 9, 130, 48);
    drawSprite(13 +1 +1 +1 +1, 7, 175, 48);
    drawSprite(13 +1 +1 +1 +1 +1, 4, 130, 90);
    drawSprite(13 +1 +1 +1 +1 +1, 2, 175, 90);
    makeShip(52);
    makeCloud();
    makeFullHealth();
}


void drawStaticObjectsLvlBoss(void)
{
    drawSprite(13 +1 +1 +1 +1 +1 +1 +1, 12, (96 -16), 68);
    drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1, 11, 96, 68);
    drawSprite(13 +1 +1 +1 +1, 9, 130, 48);
    drawSprite(13 +1 +1 +1 +1, 7, 175, 48);
    drawSprite(13 +1 +1 +1 +1 +1, 4, 130, 90);
    drawSprite(13 +1 +1 +1 +1 +1, 2, 175, 90);
    makeShip(52);
    makeFullHealth();
    makeCloud();
    makeSwarm(22);
}


void makeShip(int num_init) {

        int length = 15;
   int num_idx = 0;
   int num_spt = num_init;
        while (num_idx < 9) {
                        drawSprite(0 +1 +1 +1 +1, num_spt, (240 - length * num_idx), 53);
                        num_idx++; num_spt++;
        }
        while (num_idx < 18) {
                        drawSprite(0 +1 +1 +1 +1 +2 +1, num_spt, (240 - length * (num_idx - 9)), 85);
                        num_idx++; num_spt++;
        }
        while (num_idx < 27) {
                        drawSprite(0 +1 +1 +1 +1 +2 +1 +2 +1, num_spt, (240 - length * (num_idx - 18)), 69);
                        num_idx++; num_spt++;
        }
        drawSprite(0 +1 +1 +1 +1 +1, num_spt, (240 - length * (num_idx - 18)), 53);
        drawSprite(0 +1 +1 +1 +1 +2 +1 +2 +1, (num_spt+1), (240 - length * (num_idx - 18)), 69);
        drawSprite(0 +1 +1 +1 +1 +2 +1 +1, (num_spt+2), (240 - length * (num_idx - 18)), 85);
        num_idx++;
        drawSprite(0 +1 +1 +1 +1 +2, (num_spt+3), (240 - length * (num_idx - 18)), 53);
        drawSprite(0 +1 +1 +1 +1 +2 +1 +2 +1, (num_spt+4), (240 - length * (num_idx - 18)+9), 69);
        drawSprite(0 +1 +1 +1 +1 +2 +1 +2, (num_spt+5), (240 - length * (num_idx - 18)), 85);
}


void makeFullHealth()
{
    drawSprite(0 +1 +1 +1 +1 +2 +1 +2 +1 +1, 19, 192, 0);
    drawSprite(0 +1 +1 +1 +1 +2 +1 +2 +1 +1, 19 +1, 208, 0);
    drawSprite(0 +1 +1 +1 +1 +2 +1 +2 +1 +1, 19 +2, 224, 0);
}


void makeCloud()
{
    int idx = 90;
    drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, 22, 137);
    drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, 28, 63);
    drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, 47, 20);
    drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, 62, 94);
    drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, 102, 135);
    drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, 116, 15);
    drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, 157, 118);
    drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, 190, 23);
    drawSprite(13 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1 +1, idx++, 218, 134);
}
# 15 "mygbalib.h" 2
# 1 "math.h" 1





int canInteract(int x1,int y1,int x2,int y2)
{
    int i = isLessThan((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2),(3*3));

    return i;
}
# 16 "mygbalib.h" 2




void fillRNG(void)
{
    int i;

    for (i = 0; i < 16; i++)
        rng_seed[i]=(rand() % (5)) + 1;
}


void fillPalette(void)
{
    int i;


    for (i = 0; i < 26; i++)
        ((unsigned short *) 0x5000200)[i] = palette[i];
}


void fillSprites(void)
{
    int i;


    for (i = 0; i < 128*16*16; i++)
        ((unsigned short *) 0x6010000)[i] = (sprites[i*2+1] << 8) + sprites[i*2];


    for(i = 0; i < 128; i++)
        drawSprite(0, i, 240,160);
}


void drawSprite(int numb, int N, int x, int y)
{

    *(unsigned short *)(0x7000000 + 8*N) = y | 0x2000;
    *(unsigned short *)(0x7000002 + 8*N) = x | 0x4000;
    *(unsigned short *)(0x7000004 + 8*N) = numb*8;
}
# 26 "main.c" 2





extern int isLessThan(u32 num1, u32 num2);
extern int modulo16(u32 num);




void Handler(void)
{
    *(u16*)0x4000208 = 0x00;

    if ((*(u16*)0x4000202 & 0x20) == 0x20)
    {
        checkbutton();
        movePlayer();
        moveProjectile();
    }

    if ((*(u16*)0x4000202 & 0x10) == 0x10)
    {
        tick_cmd++;
        checkDamageProjectile();
    }

    if ((*(u16*)0x4000202 & 0x8) == 0x8)
    {
        tick_sec++;
        levelHandler();
        cannonHandler();
        railgunHandler();
        blowProjectileHandler();
        blowSwarmHandler();
    }

    *(u16*)0x4000202 = *(u16*)0x4000202;

    *(u16*)0x4000208 = 0x01;
}





int main(void)
{

    *(unsigned short *) 0x4000000 = 0x40 | 0x2 | 0x1000;


    *(unsigned short *)(0x5000000) = ((16) + (22<<5) + (25<<10));


    fillPalette();
    fillSprites();


    fillRNG();


    initialDisplay();


    (*(unsigned int*)0x3007FFC) = (int)&Handler;

    *(u16*)0x4000200 |= 0x8 | 0x10 | 0x20 | 0x1000;



    *(u16*)0x4000100 = -0x4000;
    *(u16*)0x4000102 = 0x0040 | 0x0003 | 0x0080;

    *(u16*)0x4000104 = -0x4000;
    *(u16*)0x4000106 = 0x0040 | 0x0002 | 0x0080;

    *(u16*)0x4000108 = -0x4000;
    *(u16*)0x400010A = 0x0040 | 0x0000 | 0x0080;

    *(u16*)0x4000208 = 0x1;

    while(1);

         return 0;
}
